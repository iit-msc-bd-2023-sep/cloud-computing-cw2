version: 0.2
phases:
  install:
    commands:
        - echo Logging in to Docker Hub...
        - DOCKER_USERNAME=$(aws secretsmanager get-secret-value --secret-id docker_hub --query 'SecretString' --output text | jq -r '.docker_hub_user_name')
        - DOCKER_PASSWORD=$(aws secretsmanager get-secret-value --secret-id docker_hub --query 'SecretString' --output text | jq -r '.docker_hub_pwd')`
        - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
        - echo Logging in to Amazon ECR...
        - aws --version
        - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
        - echo Installing kubectl
        - curl -o kubectl https://amazon-eks.s3.$AWS_DEFAULT_REGION.amazonaws.com/1.15.10/2020-02-22/bin/linux/amd64/kubectl
        - chmod +x ./kubectl
        - kubectl version --short --client
        - chmod +x ./kubectl
        - kubectl version --short --client
  pre_build:
    commands:
      - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name eks-cluster-cc-cw1
      - cat ~/.kube/config
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - TAG="$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)-cw1-v2"
      - echo $TAG
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker pull $REPOSITORY_URI:$IMAGE_TAG || true
      - docker build --cache-from $REPOSITORY_URI:$IMAGE_TAG --tag $REPOSITORY_URI:$TAG .
      - docker tag $REPOSITORY_URI:$TAG $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - REPO_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - docker push $REPOSITORY_URI:$TAG
      - echo Applying changes to deployment
      - kubectl -n cloud-computing-cw1 set image deployment/developer-iq-service-v2 developer-iq-service-v2=$REPOSITORY_URI:$TAG
      - echo Writing image definitions file...
      - printf '[{"name":"%s","imageUri":"%s"}]' "$CONTAINER_NAME" "$REPO_URI:$IMAGE_TAG" | tee imagedefinitions.json
      - echo $REPOSITORY_URI
      - echo $IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"%s","imageUri":"%s"}]' "$CONTAINER_NAME" "$REPOSITORY_URI:$IMAGE_TAG" | tee imagedefinitions.json
      - ls -l
artifacts:
  files: imagedefinitions.json
